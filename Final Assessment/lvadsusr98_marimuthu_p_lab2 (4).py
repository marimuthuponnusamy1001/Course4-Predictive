# -*- coding: utf-8 -*-
"""LVADSUSR98_Marimuthu P_Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_vPBNRcgX8Vu5kQUJSkJfxEwPbWwf-qs
"""

import pandas as pd
data = pd.read_csv("/content/auto-mpg.csv")
data.head()

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns


# Check for missing values and handle them by filling with mean
print(data.isnull().sum())
data.fillna(data.mean(), inplace=True)

# Drop non-numeric columns for EDA
data.drop(['car name'], axis=1, inplace=True)
data.drop(['horsepower'],axis=1, inplace=True)

# EDA
print(data.shape)
print(data.info())
print(data.describe())

# Histogram of numerical features
data.hist(figsize=(10, 8))
plt.tight_layout()
plt.show()

# Pairplot of numerical features
sns.pairplot(data)
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

# Handle outliers using IQR method
Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1
data = data[~((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)]

# Separate features and target variable
X = data.drop('mpg', axis=1)
y = data['mpg']

# Normalize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Fit the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate performance metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Visualize predicted vs. actual values
plt.scatter(y_test, y_pred)
plt.xlabel('Actual MPG')
plt.ylabel('Predicted MPG')
plt.title('Actual vs. Predicted MPG')
plt.show()

# Feature importance
coefficients = pd.DataFrame(model.coef_, X.columns, columns=['Coefficient'])
coefficients.sort_values(by='Coefficient', ascending=False, inplace=True)
sns.barplot(x='Coefficient', y=coefficients.index, data=coefficients)
plt.title('Feature Importance')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error, precision_score, f1_score, recall_score, confusion_matrix
from sklearn.preprocessing import MinMaxScaler
import time
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.cluster import KMeans
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

data=pd.read_csv("https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch4-Assessment/main/auto-mpg.csv")

data.head()

data.shape

data.isna().sum()

data.fillna(data.mean(), inplace=True)

data.isna().sum()

data['horsepower'] = data['horsepower'].replace('?', np.nan)
data['horsepower'] = pd.to_numeric(data['horsepower'], errors='coerce')
data['horsepower'].fillna(data['horsepower'].mean(), inplace=True)

data.isna().sum()

Q1 = data.quantile(0.25)
Q3 = data.quantile(0.75)
IQR = Q3 - Q1

outliers = ((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)
print(outliers)

df = data[~outliers]

df.shape

df.drop(columns=['car name'], inplace=True)

print(df.describe())

sns.histplot(df['mpg'], kde=True)
plt.title('Distribution of Fuel Efficiency (mpg)')
plt.xlabel('mpg')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
numerical_cols = ['cylinders', 'displacement', 'horsepower', 'weight', 'acceleration']
for i, col in enumerate(numerical_cols, 1):
    plt.subplot(2, 3, i)
    sns.scatterplot(x=col, y='mpg', data=df)
    plt.title(f'{col} vs. mpg')
plt.tight_layout()
plt.show()

X = df.drop(columns=['mpg'])
y = df['mpg']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
from sklearn.metrics import mean_squared_error, r2_score
y_pred = model.predict(X_test)
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R-squared:", r2_score(y_test, y_pred))